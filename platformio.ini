; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
; this defines the environment used by default 
; typically the ones you are working on
default_envs = esp32Control
src_dir = .

[env]
monitor_speed = 115200
build_flags = 
	-D SERIAL_SPEED=115200
monitor_filters = time
lib_deps = 
	TaskScheduler
	ArduinoJson
	painlessmesh/painlessMesh@^1.4.6

; A simple Hello World example for esp8266 generation 12e
[env:esp8266]
platform = espressif8266
board = esp12e
framework = arduino
upload_port = COM9
monitor_port = COM9
build_flags =
	${env.build_flags}
	; activate HelloWorld component
	-D HELLO_WORLD
lib_deps = 
	${env.lib_deps}
	ESPAsyncTCP

; A simple Hello World example for esp32
[env:esp32]
platform = espressif32
board = esp32dev
framework = arduino
upload_port = COM10
monitor_port = COM10
build_flags =
	${env.build_flags}
	; activate HelloWorld component
	-D HELLO_WORLD
lib_deps = 
	${env.lib_deps}
	AsyncTCP

; A RootServer for esp32
; You should take an esp32 because it can be connected by 10 devices
[env:esp32RootServer]
platform = espressif32
board = esp32dev
framework = arduino
upload_port = COM10
monitor_port = COM10
build_flags =
	${env.build_flags}
	; enable OTA by defining a unique role within 'firmware_ESP<32||8266>_<role>.bin'
	-D OTA_ROLE='"rootserver"'
	-D IS_ROOT
	; activate WebServer component - this can right now only be done on a root server
	-D HAS_WEB_SERVER
	; you can define either a UNIQUE_HOSTNAME, a HOSTNAME or nothing
	-D UNIQUE_HOSTNAME='"RobonetRoot"'
lib_deps = 
	${env.lib_deps}
	AsyncTCP
	ottowinter/ESPAsyncWebServer-esphome@^1.2.7

; A differential drive chassis with a d1-mini
[env:esp8266Chassis]
platform = espressif8266
board = d1_mini
framework = arduino
upload_port = COM6
monitor_port = COM6
build_flags =
	${env.build_flags}
	; enable OTA by defining a unique role within 'firmware_ESP<32||8266>_<role>.bin'
	-D OTA_ROLE='"minidiffdrive"'
	; activate Chassis component
	-D HAS_CHASSIS
	; set to differential drive
	-D IS_DIFF_DRIVE
	; I am using a D1-Mini Motor-Shield
	-D WITH_D1MINI_MOTOR_SHIELD
lib_deps = 
	${env.lib_deps}
	ESPAsyncTCP

; A control witn a single joystick for an ESP32
[env:esp32Control]
platform = espressif32
board = esp32dev
framework = arduino
upload_port = COM4
monitor_port = COM4
build_flags =
	${env.build_flags}
	; enable OTA by defining a unique role within 'firmware_ESP<32||8266>_<role>.bin'
	-D OTA_ROLE='"control"'
	; activate Chassis component
	-D HAS_CONTROL
	; we have to set the drive node ID
	-D DRIVE_NODE=2731577066
lib_deps = 
	${env.lib_deps}
	ESPAsyncTCP
